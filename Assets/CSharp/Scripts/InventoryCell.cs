using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using static ItemUI;

public class InventoryCell : BoardUICellBase
{
    private Color _originalColor = Color.white;
    private Image _imageComponent = null;

    private void Awake()
    {
        _imageComponent = GetComponent<Image>();
        Debug.Assert(_imageComponent != null, "이미지 컴포넌트가 있어야하는 스크립트");
        
        _originalColor = _imageComponent.color;
    }



    public override bool TryMoveItemDropOnCell(ItemStoreDescBase storedDesc, ref int startX, ref int startY, bool grabRotation)
    {
        Debug.Assert(_owner != null, "Cell의 오너는 널일 수 없다.");

        //해당 마우스 포지션으로는 아이템을 넣을 수 없다.
        if (_owner.CheckItemDragDrop(storedDesc, ref startX, ref startY, grabRotation, this) == false)
        {
            return false; 
        }

        return true;
    }





    public void TurnOn()
    {
        _imageComponent.color = Color.green;
    }

    public void TurnOff()
    {
        _imageComponent.color = _originalColor;
    }





    public void TryMoveItemDropOnItem(ItemStoreDescBase storedDesc, ItemUI caller)
    {
        //Debug.Assert(_owner != null, "Cell의 오너는 널일 수 없다.");

        //GameObject itemUI = _owner.getItem(storedDesc._storedIndex);

        //ItemUI itemBaseComponent = itemUI.GetComponent<ItemUI>();

        //if (itemBaseComponent == caller) 
        //{
        //    if (false /*회전이 다릅니까? ->회전이 다름*/)
        //    {
        //        //회전을 적용하는 작업들
        //    }

        //    return;
        //}

        ////동일종류가 아님.
        //if (itemBaseComponent.getStoredDesc()._itemAsset._ItemKey != storedDesc._itemAsset._ItemKey)
        //{
        //    /*---------------------------------------------------------------------------
        //    |TODO|  나중에 아이템 스왑하거나 룬 끼우기 할거라면 여기를 수정해야한다.
        //    ---------------------------------------------------------------------------*/
        //    return;
        //}

        ////동일 종류다. ->스택 가능한지 체크, 스택 가능한만큼만 수량 옮기기
    }
}
